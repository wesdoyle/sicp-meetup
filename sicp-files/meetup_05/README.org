#+title: Notes

* Constructing Procedures Using Lambda
=lambda= creates procedures in the same way as =define= — the only differences is that a procedure created using =lambda= is not automatically associated with a name in the environment.

#+begin_src scheme
(define (plus4 x) (+ x 4))
#+end_src
is equivalent to
#+begin_src scheme
(define plus4 (lambda (x) (+ x 4)))
#+end_src

The nice thing about lambdas is that they allow us to pass trivial procedures as arguments without having to name them. Example with =pi-sum=:
#+begin_src scheme
;; `sum' function given in last section
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (pi-sum a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
#+end_src

Like any expression whose value is a procedure, a procedure created using =lambda= can be used as the operator in a combination:
#+begin_src scheme
(define (square x) (* x x))

((lambda (x y z) (+ x y (square z))) 1 2 3)
#+end_src

#+RESULTS:
: 12


* Using let to create local variables
As a side effect of their ability to be used as the operator in a combination, lambda expressions can also be used to create local variables:
#+begin_src scheme
(define (f x y)
  ((lambda (a b) ;; a and b are names scoped to the body of the procedure produced by lambda
     (+ (* x (square a))
        (* y b)
        (* a b)))
   ;; arguments to the lambda
   (+ 1 (* x y)) ;; the value of `a` in the lambda body
   (- 1 y))) ;; the value of `b` in the lambda body
#+end_src
[[file:local_vars_with_lambda.png]]

The =let= special form is a more convenient way to use this pattern:
#+begin_src scheme
(define (f x y)
  (let ((a (+ 1 (* x y))) ;; the names of local variables and their values are colocated
        (b (- y 1)))
    (+ (* x (square a))
        (* y b)
        (* a b))))
#+end_src

=let= is just syntactic sugar for the lambda pattern in the first example, which means it doesn't require the interpreter to implement any additional constructs to support it. In fact, one of the cool things about Scheme and other lisps is the ability to define new syntax from existing primitives using macros; we can define our own =let=:

#+begin_src scheme
(define-macro (our-let bindings . body)
  `((lambda ,(map car bindings)
      ,@body)
    ,@(map cadr bindings)))

(our-let ((a 1)
          (b 2))
 (+ a b))

;; 3
#+end_src

#+RESULTS:
: 3

*NOTE*: Macros aren't used much in SICP, so it isn't important to fully understand the =our-let= example. There's an interesting parallel here, though! Like procedures abstract compound operations (consisting of primitive operations or other procedures), high-level language constructs like =let= abstract /other language constructs/.

* Procedures that make other procedures
This isn't a section in the book, but I thought it might be useful to have something along these lines at this point.

Procedures can create other procedures using lambda. Here, we define a =make-adder= procedure—it takes a single number =x= and returns a procedure that takes a single number =y= and adds =x= to =y=:
#+begin_src scheme :results output
(define (make-adder x)
  (lambda (y)
    (+ x y)))

(define inc (make-adder 1))
(define dec (make-adder -1))

(define add-5 (make-adder 5))
(define add-9000 (make-adder 9000))

(define-syntax demonstrate
  (syntax-rules ()
    ((_ form) (begin
                (display 'form)
                (display " => ")
                (display form)
                (newline)))))

(demonstrate (inc 1))
;; (inc 1) => 2

(demonstrate (dec 1))
;; (dec 1) => 0

(demonstrate (add-5 37))
;; (add-5 37) => 42

(demonstrate (add-9000 1))
;; (add-9000 1) => 9001

(demonstrate (make-adder 1))
;; (make-adder 1) => #<procedure 1047529c0 at <unknown port>:8:2 (y)>
#+end_src

#+RESULTS:
: (inc 1) => 2
: (dec 1) => 0
: (add-5 37) => 42
: (add-9000 1) => 9001
: (make-adder 1) => #<procedure 102962600 at <unknown port>:8:2 (y)>

This is a trivial example, but it gives us a taste of the power that lambda gives us. The ability for procedures to access variables from the scope in which they're defined is +the  =closure= property. There are some really cool examples in later chapters that cover the concept+ (edit: the =closure= property is a an unrelated concept that will be discussed later. the example here uses a different definition of =closure= related to the behavior of free variables in procedures. it will not be discuessed in SICP, but it _is_ important to how many things work in Scheme).
* Chapter 2: Building Abstractions with Data
In the first chapter, we've focused on simple data (numbers) and procedure; chapter 2 introduces more complex, /compound/ data structures.

#+begin_quote
Why do we want compound data in a programming language? For the same reasons that we want compound procedures: to elevate the conceptual level at which we can design our programs, to increase the modularity of our designs, and to enhance the expressive power of our language.
#+end_quote


** Rational numbers
We can conceptualize a rational number as a pair of two numbers: a numerator and a denominator. Conveniently, Scheme provides a primitive data structure—the /pair/ — that we can use to represent these. At minimum, our mini language for working with rational numbers must be comprised of a few procedures that act as a convential /interface/ to the rational number data structure: =make-rat=, =numer= (selector for a rational number's numerator), and =denom= (selector for a rational number's denominator)

Example implementation using the /pair/ data structure:
#+begin_src scheme
(define (make-rat n d)
  (cons n d))

(define (numer rat)
  (car rat))

(define (denom rat)
  (cdr rat))
#+end_src

*NOTE*: =cons= is the pair constructor. It takes two arguments: the first is the first member of the pair; the second argument is the second member of the pair. The first member of a pair can be accessed by passing the pair to the =car= procedure. The second member of a pair can be accessed by using the =cdr= procedure.

Given these basic procedures for interacting with our basic data structure for rational numbers, we can define further operations: addition, subtraction, multiplication, division, and equality:
#+begin_src scheme
(define (make-rat n d)
  (cons n d))

(define (numer rat)
  (car rat))

(define (denom rat)
  (cdr rat))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))

(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
#+end_src

We can define a procedure to more easily visualize our rational number representation:
#+begin_src scheme
(define (print-rat rat)
  (newline)
  (display (numer rat))
  (display "/")
  (display (denom rat)))
#+end_src

See =code.scm= for examples of working with rational numbers

*** Abstraction Barriers
As of now, none of the operations in our rational number language reduce fractions. For example: =(add-rat (make-rat 1 4) (make-rat 1 4))= produces =8/16=.

One possible solution would be to reduce when the number is created:
#+begin_src scheme :results output
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (make-rat n d)
  (let ((g (gcd n d)))
    (cons (/ n g)
          (/ d g))))

;; redefined for the sake of org-babel
(define (numer rat)
  (car rat))

(define (denom rat)
  (cdr rat))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (print-rat rat)
  (display (numer rat))
  (display "/")
  (display (denom rat))
  (newline))

(print-rat
 (add-rat (make-rat 1 4) (make-rat 1 4)))
;; => 1/2
#+end_src

#+RESULTS:
: 1/2

Alternatively, this reduction could happen inside of the =numer= and =denom= selectors:

#+begin_src scheme :results output
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (make-rat n d)
  (cons n d))

(define (numer x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (car x) g)))

(define (denom x)
  (let ((g (gcd (car x) (cdr x))))
    (/ (cdr x) g)))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (print-rat rat)
  (display (numer rat))
  (display "/")
  (display (denom rat))
  (newline))

(print-rat
 (add-rat (make-rat 1 4) (make-rat 1 4)))
;; 1/2
#+end_src

#+RESULTS:
: 1/2

While there are tradeoffs for one implementation over the other, the important part in regards to our rational number language is that the observed behavior does not change.

[[file:abstraction_boundaries.svg]]

([[https://sarabander.github.io/sicp/html/2_002e1.xhtml#g_t2_002e1_002e2][Source]])

#+begin_quote
The horizontal lines represent abstraction barriers that isolate different “levels” of the system. At each level, the barrier separates the programs (above) that use the data abstraction from the programs (below) that implement the data abstraction. Programs that use rational numbers manipulate them solely in terms of the procedures supplied “for public use” by the rational-number package: add-rat, sub-rat, mul-rat, div-rat, and equal-rat?.
#+end_quote

In terms of more commonly used languages, =add-rat=, =sub-rat=, =mul-rat=, =div-rat=, =print-rat=, and =equal-rat?= (and an argument can be made that the book should include at least =make-rat= here, as well), act as the public /interface/ to the rational number data-type—the underlying representations/implementations don't matter so long as the behavior is the same.

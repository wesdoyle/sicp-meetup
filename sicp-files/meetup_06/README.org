#+title: Meetup 6

* 2.1.3 What is meant by data?
SICP defines /data/ as a collection of selectors and constructors combined with specific conditions that those procedures must fulfill in order to be a valid representation.

Using the rational number example from the previous section, our rational data type is defined by the constructor =make-rat= and the selectors =numer= and =denom=. To constitute a valid representation of a ration number, given that =x= is =(make-rat n d)= where =n= is any integer and =d= is any non-zero integer, =(numer x)= is =n= and =(denom x)= is =d=.

This also holds for lower-level data structures as well, like the /pair/. The pair constructor is =cons= and the objects that the pair glues together can be retrieved using =car= and =cdr=. In order for these operations to constitute a valid pair representation, any objects =x= and =y=, if =z= is =(cons x y)= then =(car z)= is =x= and =(cdr z)= is =y=.

As discussed in [[org:../projects/open-source/sicp-meetup/sicp-files/meetup_05/README.org][Abstraction Barriers]] (TODO: link to the actual section), the underlying implementation of some data structure doesn't matter, so long as its constructors and selectors satisfy its conditions. In fact, we can implement the pair and its operations using /only procedures/:

#+begin_src scheme :results output
(define-syntax demonstrate
  (syntax-rules ()
    ((_ form) (begin
                (display 'form)
                (display " => ")
                (display form)
                (newline)))))

(define (cons x y)
  (define (dispatch m)
    (case m
      ((0) x)
      ((1) y)
      (else (error "Argument not 0 or 1:
                   CONS" m))))
  dispatch)

(define (car z) (z 0))
(define (cdr z) (z 1))

(define x (cons 1 2))

(demonstrate x)
;; x => #<procedure dispatch (m)>

(demonstrate (car x))
;; (car x) => 1

(demonstrate (cdr x))
;; (cdr x) => 2
#+end_src

#+RESULTS:
: x => #<procedure dispatch (m)>
: (car x) => 1
: (cdr x) => 2

That's one of my favorite examples in the book!

For performance purposes, it is likely that a given Scheme implementation will implement the pair data type more directly, but because these procedures satisfy pair's conditions, it /could/ be implemented this way.

*NOTE:* That we can use procedures as data objects lets us use them to represent compound data. The style of programming used in this is example is called /message passing/. =cons= returns an object (represented by a procedure) that accepts two different "messages", =0= and =1=. It responds to those messages by returning the relevant element of the pair. This is likely familiar to those who are accustomed to the object-oriented paradigm and demonstrates the power of first-class procedures/functions. We'll come across this style again in chapter 3, when SICP discusses "modelling and simulation" and stateful objects.

** Exercise 2.4
An alternative procedural representation of the pair data type:
#+begin_src scheme :results output
(define-syntax demonstrate
  (syntax-rules ()
    ((_ form) (begin
                (display 'form)
                (display " => ")
                (display form)
                (newline)))))

(define (cons x y)
  (lambda (f) (f x y)))

(define (car z)
  (z (lambda (a b) a)))

(define (cdr z)
  (z (lambda (a b) b)))

(define x (cons 1 2))

(demonstrate x)
;; x => #<procedure 1031b3220 at <unknown port>:16:2 (m)>

(demonstrate (car x))
;; (car x) => 1

(demonstrate (cdr x))
;; (cdr x) => 2
#+end_src

#+RESULTS:
: x => #<procedure 102cf6200 at <unknown port>:16:2 (f)>
: (car x) => 1
: (cdr x) => 2

* 2.2 Hierarchical Data and the Closure Property
The /pair/ primitive that we've interacted with in the last few sections can act as a glue with which we can build more complicated compound data structures. Pairs can not only contain numbers like
#+begin_src scheme :results output
(display (cons 1 2))
;; => (1 . 2)
;; The above is a common visualization for pairs
#+end_src

but also other pairs:

#+begin_src scheme :results output
(display (cons (cons 1 2)
               (cons 3 4)))
;; => ((1 . 2) 3 . 4)
;; For reasons I do not know, Guile outputs the above. I would expect something more like
;; ((1 . 2) . (3 . 4))
#+end_src

#+RESULTS:
: ((1 . 2) 3 . 4)

The ability for a pair to contain other pairs is called the /closure property/ of cons. SICP defines the /closure property/, more generally, as follows:
#+begin_quote
In general, an operation for combining data objects satisfies the closure property if the results of combining things with that operation can themselves be combined using the same operation.
#+end_quote

#+begin_quote
Closure is the key to power in any means of combination because it permits us to create hierarchical structures—structures made up of parts, which themselves are made up of parts, and so on.

From the outset of Chapter 1, we’ve made essential use of closure in dealing with procedures, because all but the very simplest programs rely on the fact that the elements of a combination can themselves be combinations. In this section, we take up the consequences of closure for compound data.
#+end_quote

*NOTE:* /Closure/ in this context refers to a *different* concept than you may be familiar with in languages with lexical scope and first-class functions/procedures (Scheme, JavaScript, Python, etc.) where a function "closes over" variables in its outer scope. SICP doesn't discuss that kind of closure (at least not using the /word/ "closure"), so assume that any mention of "closure" going forward refers to the former definition relating to nested combinations.

** 2.2.1 Representing Sequences
One of the useful structures that we can create with =cons= pairs is the /sequence/: an ordered collection of data objects. One straightforward and common sequence that can be built using pairs is the /list/ (specifically, the singley-linked-list). Side note: this structure is where the original LISP got its name— LISt Processing.

In a list built using pairs, the =car= of the pair (first element) is the value data object at that point in the list. The =cdr= points at the next pair, which contains a data element, points at another pair, and so on. The end of a list is a pair whose =cdr= is =nil=.

#+begin_src scheme :results output
(display
 (cons 1
       (cons 2
             (cons 3
                   (cons 4
                         ;; the book uses the name actual name `nil', but that's been removed from the
                         ;; Scheme standard. The empty list '() is the standard representation of nil.
                         ;; More info: web.archive.org/web/20070808004043/http://wiki.wordaligned.org/sicp/published/FrequentlyAskedQuestions
                         '())))))
;; => (1 2 3 4)
#+end_src

#+RESULTS:
: (1 2 3 4)

We can also construct the above sequence using the =list= procedure:
#+begin_src scheme :results output
(display (list 1 2 3 4))
;; => (1 2 3 4)
#+end_src

#+RESULTS:
: (1 2 3 4)

The list is such a central data structure in Scheme that there's a special representation... in fact it's the same representation as the syntax we write to make combinations

*NOTE:* attempting to evaluate the list as represented above—(1 2 3 4)-however, will signal an error as it attempts to apply =1= as a procedure to the arguments =2 3 4=. In section 2.3, we'll see a way to deal with this using /quotation/. That'll also help use understand the empty list syntax representing =nil=, ='()= in the earlier example of building a list using =cons=.

The following examples show how =car= and =cdr= can be used to access elements in a list:

#+begin_src scheme :results output
(define-syntax demonstrate
  (syntax-rules ()
    ((_ form) (begin
                (display 'form)
                (display " => ")
                (display form)
                (newline)))))(define one-through-four (list 1 2 3 4))

;; car gets the first element of the list
(demonstrate (car one-through-four))
;; => 1

;; cdr gets the list, excluding the first element
(demonstrate (cdr one-through-four))
;; => (2 3 4)

;; combining car and cdr lets us access values at different points in the list
(demonstrate (car (cdr one-through-four)))
;; => 2

;; cons prepends an element to the list
(demonstrate (cons 10 one-through-four))
;; => (10 1 2 3 4)

;; but cons does not mutate the list. when we prepended 10 before, we actually created a new list consisting of the original list, with 10 at the start
(demonstrate (cons 5 one-through-four))
;; => (5 1 2 3 4)
#+end_src

*** List Operations
There are some common patterns for working with lists

One is "cdr"ing down the list to visit each item. Consider this example, which cdrs down the list to retrieve the item at the given (zero-based) index:

#+begin_src scheme :results output
(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))))

(define one-to-three (list 1 2 3))

(display (list-ref one-to-three 0))
;; => 1
(newline)

(display (list-ref one-to-three 1))
;; => 2
(newline)

(display (list-ref one-to-three 2))
;; => 3
(newline)
#+end_src

#+RESULTS:
: 1
: 2
: 3

It's common to cdr down an entire list. The =null?= procedure returns =#t= (true) when its argument—which should be a list—is empty. The following example computes the length of a list recursively cdring down the given list, with a check for =null?= as the terminal condition:

#+begin_src scheme :results output
(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))))

(display (length (list)))
;; => 0
(newline)

(display (length (list 1 2 3)))
;; => 3
(newline)

(display (length (list 2 4 6 8 10)))
;; => 5
(newline)
#+end_src

Another technique is to "cons up" a list while cdring down another list, as in this implementation of an =append= procedure:

#+begin_src scheme :results output
(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1)
            (append (cdr list1)
                    list2))))

(display (append (list 1 2 3) (list 4 5 6)))
;; => (1 2 3 4 5 6)
#+end_src

#+RESULTS:
: (1 2 3 4 5 6)

**** Selected Exercises
***** 2.17
#+begin_quote
Define a procedure last-pair that returns the list that contains only the last element of a given (nonempty) list:

(last-pair (list 23 72 149 34))
(34)
#+end_quote

#+begin_src scheme :results output
(define (last-pair items)
  ;; Because a list is a chain of cons cells terminated by/nil an empty list, if the cdr of a pair
  ;; is empty, then we're looking at the last one
  (if (null? (cdr items))
      items
      (last-pair (cdr items))))

(display (last-pair (list 23 72 149 34)))
;; => (34)
#+end_src

***** 2.18
#+begin_quote
Define a procedure reverse that takes a list as argument and returns a list of the same elements in reverse order:

(reverse (list 1 4 9 16 25))
(25 16 9 4 1)
#+end_quote

#+begin_src scheme :results output
(define (reverse items)
  (define (reverse-iter res items*)
    (if (null? items*)
        res
        (reverse-iter (cons (car items*) res)
                      (cdr items*))))
  (reverse-iter (list) items))

(display (reverse (list 1 4 9 16 25)))

#+end_src
***** 2.20
#+begin_quote
Use /dotted tail/ notation to write a procedure same-parity that takes one or more integers and returns a list of all the arguments that have the same even-odd parity as the first argument. For example,

(same-parity 1 2 3 4 5 6 7)
(1 3 5 7)

(same-parity 2 3 4 5 6 7)
(2 4 6)
#+end_quote


#+begin_src scheme :results output
(define (same-parity first . rest)
  (let ((has-same-parity? (if (even? first)
                              even?
                              odd?)))
    ;; this can be made a lot simple using the `filter` procedure
    ;; but we'll see that later
    (define (same-parity-iter res remaining)
      (cond ((null? remaining)
             (reverse res))
            ((has-same-parity? (car remaining))
             (same-parity-iter (cons (car remaining) res) (cdr remaining)))
            (else
             (same-parity-iter res (cdr remaining)))))

    (same-parity-iter (list first) rest)))

(display (same-parity 1 2 3 4 5 6 7))
;; => (1 3 5 7)
(newline)

(display (same-parity 2 3 4 5 6 7))
;; => (2 4 6)
(newline)
#+end_src

#+RESULTS:
: (1 3 5 7)
: (2 4 6)

*** Mapping over lists
Consider the following procedure:

#+begin_src scheme :results output
(define (scale-list items factor)
  (if (null? items)
      '()
      (cons (* (car items) factor)
            (scale-list (cdr items)
                        factor))))

(display (scale-list (list 1 2 3 4 5) 10))
;; => (10 20 30 40 50)
#+end_src

#+RESULTS:
: (10 20 30 40 50)

It takes a list of numbers and a factor returns a new list comprised of each element of the first list multiplied by the factor.

This kind of operation—creating a list by applying some operation to every element of an input list—is common enough to be a named abstraction: =map=. =map= can be implemented as follows

#+begin_src scheme :results output
(define (map proc items)
  (if (null? items)
      '()
      (cons (proc (car items))
            (map proc (cdr items)))))

(display (map abs (list -10 2.5 -11.6 17)))
;; => (10 2.5 11.6 17)
(newline)

(display (map (lambda (x) (* x x)) (list 1 2 3 4)))
;; => (1 4 9 16)
(newline)
#+end_src

#+RESULTS:
: (10 2.5 11.6 17)
: (1 4 9 16)

Using =map= leads to a much simpler implementation of =scale-list=

#+begin_src scheme :results output
(define (scale-list items factor)
  (map (lambda (x) (* x factor)) items))

(display (scale-list (list 1 2 3 4 5) 10))
;; => (10 20 30 40 50)
#+end_src

#+RESULTS:
: (10 20 30 40 50)

One of the special things about =map= is that it raises the level of abstraction of =scale-list= (for example). It is only important that =scale-list= transforms a collection by multiplying each item by some factor. The mechanics of how that collection is traversed isn't important.

**** Exercises
***** 2.21
#+begin_quote
The procedure square-list takes a list of numbers as argument and returns a list of the squares of those numbers.

(square-list (list 1 2 3 4))
(1 4 9 16)

Here are two different definitions of square-list. Complete both of them by filling in the missing expressions:

(define (square-list items)
  (if (null? items)
      nil
      (cons ⟨??⟩ ⟨??⟩)))

(define (square-list items)
  (map ⟨??⟩ ⟨??⟩))
#+end_quote

#+begin_src scheme :results output
(define (square x) (* x x))

(define (square-list-1 items)
  (if (null? items)
      '()
      (cons (square (car items))
            (square-list-1 (cdr items)))))

(define (square-list-2 items)
  (map square items))

(display (square-list-1 (list 1 2 3 4)))
;; => (1 4 9 16)
(newline)

(display (square-list-2 (list 1 2 3 4)))
;; => (1 4 9 16)
(newline)
#+end_src

#+RESULTS:
: (1 4 9 16)
: (1 4 9 16)

***** 2.22

#+begin_quote
Louis Reasoner tries to rewrite the first square-list procedure of Exercise 2.21 so that it evolves an iterative process:
#+end_quote

#+begin_src scheme
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons (square (car things))
                    answer))))
  (iter items '()))
#+end_src

#+begin_quote
Unfortunately, defining square-list this way produces the answer list in the reverse order of the one desired. **Why?**
#+end_quote

The result is reversed because each item is consed onto the answer list, rather than appended

#+begin_src scheme
;; answer: ()
;; items: (1 2 3 4)
;; square first item in items and cons it onto answer:
(cons (square 1) '())

;; answer: (1)
;; items: (2 3 4)
;; square first item in items and cons it onto answer:
(cons (square 2) '(1))

;; answer: (4 1)
;; items: (3 4)
;; square first item in items and cons it onto answer:
(cons (square 3) '(4 1))

;; answer: (9 4 1)
;; items: (4)
;; square first item in items and cons it onto answer:
(cons (square 4) '(9 4 1))

;; answer: (16 9 4 1)
;; items: ()
;; nothing left in items, so return answer
'(16 9 4 1)
#+end_src

#+begin_quote
Louis then tries to fix his bug by interchanging the arguments to cons:
#+end_quote

#+begin_src scheme
(define (square-list items)
  (define (iter things answer)
    (if (null? things)
        answer
        (iter (cdr things)
              (cons answer
                    (square
                     (car things))))))
  (iter items '()))
#+end_src

#+begin_quote
This doesn’t work either. **Explain.**
#+end_quote

The structure gets reversed. Rather than consing the square of a number onto the answer to create a list, the answer gets consed onto the square. It produces something like:
=((((() . 1) . 4) . 9) . 16)=
***** 2.23
#+begin_quote
The procedure for-each is similar to map. It takes as arguments a procedure and a list of elements. However, rather than forming a list of the results, for-each just applies the procedure to each of the elements in turn, from left to right. The values returned by applying the procedure to the elements are not used at all—for-each is used with procedures that perform an action, such as printing. For example,
#+end_quote
#+begin_src scheme
(for-each
 (lambda (x) (newline) (display x))
 (list 57 321 88))

;; => 57
;; => 321
;; => 88
#+end_src
#+begin_quote
The value returned by the call to for-each (not illustrated above) can be something arbitrary, such as true. Give an implementation of for-each.
#+end_quote

Implementation:
#+begin_src scheme :results output
(define (for-each proc items)
  (if (null? items)
      #t
      ((lambda () ;; could use `begin' instead of an immediately evald lambda here
         (proc (car items))
         (for-each proc (cdr items))))))

(for-each
 (lambda (x) (newline) (display x))
 (list 57 321 88))

;; 57
;; 321
;; 88
#+end_src

#+RESULTS:
:
: 57
: 321
: 88
